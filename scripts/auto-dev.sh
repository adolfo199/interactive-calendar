#!/bin/bash

# Script de desarrollo autom√°tico para Calendar
# Observa cambios y actualiza autom√°ticamente la aplicaci√≥n de prueba

echo "üîÑ Iniciando modo de desarrollo autom√°tico..."

# Funci√≥n para limpiar procesos al salir
cleanup() {
    echo "üõë Deteniendo procesos..."
    jobs -p | xargs -r kill
    exit 0
}

# Capturar se√±ales de salida
trap cleanup SIGINT SIGTERM

# Funci√≥n para actualizar paquete
update_package() {
    echo "üì¶ Cambios detectados, actualizando paquete..."
    
    # Construir
    npm run build
    if [ $? -ne 0 ]; then
        echo "‚ùå Error en la construcci√≥n"
        return 1
    fi
    
    # Empaquetar
    npm pack
    if [ $? -ne 0 ]; then
        echo "‚ùå Error al empaquetar"
        return 1
    fi
    
    # Instalar en la app de prueba
    cd ../calendar-test-app
    npm install ../Calendar/interactive-calendar-1.0.0.tgz --force --silent
    if [ $? -ne 0 ]; then
        echo "‚ùå Error al instalar"
        cd ../Calendar
        return 1
    fi
    
    cd ../Calendar
    echo "‚úÖ Paquete actualizado"
}

# Construcci√≥n inicial
echo "üèóÔ∏è Construcci√≥n inicial..."
update_package

# Observar cambios en src/
echo "üëÄ Observando cambios en src/..."
echo "üìù Presiona Ctrl+C para detener"

# Usar inotify para observar cambios (m√°s eficiente que polling)
if command -v inotifywait >/dev/null 2>&1; then
    while inotifywait -e modify,create,delete -r src/ >/dev/null 2>&1; do
        sleep 1  # Debounce para evitar m√∫ltiples actualizaciones
        update_package
    done
else
    # Fallback usando chokidar si inotify no est√° disponible
    npx chokidar "src/**/*" -c "sleep 1 && ./scripts/auto-dev.sh --update-only" &
    wait
fi
